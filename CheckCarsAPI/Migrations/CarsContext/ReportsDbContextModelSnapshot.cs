// <auto-generated />
using System;
using CheckCarsAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CheckCarsAPI.Migrations.CarsContext
{
    [DbContext(typeof(ReportsDbContext))]
    partial class ReportsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CheckCarsAPI.Models.Booking", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingId"));

                    b.Property<string>("CarId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BookingId");

                    b.HasIndex("CarId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("CheckCarsAPI.Models.Car", b =>
                {
                    b.Property<string>("CarId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("AdquisitionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("FuelType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Height")
                        .HasColumnType("float");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<double?>("Lenght")
                        .HasColumnType("float");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Plate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VIN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Weight")
                        .HasColumnType("float");

                    b.Property<double?>("Width")
                        .HasColumnType("float");

                    b.Property<int?>("Year")
                        .HasColumnType("int");

                    b.HasKey("CarId");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("CheckCarsAPI.Models.CarService", b =>
                {
                    b.Property<int>("CarServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CarServiceId"));

                    b.Property<string>("CarId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NextMileage")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("mileage")
                        .HasColumnType("int");

                    b.HasKey("CarServiceId");

                    b.HasIndex("CarId");

                    b.ToTable("CarsService");
                });

            modelBuilder.Entity("CheckCarsAPI.Models.Commentary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuthorId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReportId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ReportId");

                    b.ToTable("commentaries");
                });

            modelBuilder.Entity("CheckCarsAPI.Models.Photo", b =>
                {
                    b.Property<string>("PhotoId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateTaken")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReportId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PhotoId");

                    b.HasIndex("ReportId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("CheckCarsAPI.Models.Reminder", b =>
                {
                    b.Property<int>("ReminderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReminderId"));

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CarId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ReminderDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("SendIt")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReminderId");

                    b.HasIndex("CarId");

                    b.ToTable("Reminders");
                });

            modelBuilder.Entity("CheckCarsAPI.Models.ReminderDest", b =>
                {
                    b.Property<int>("ReminderDestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReminderDestId"));

                    b.Property<int>("ReminderId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReminderDestId");

                    b.HasIndex("ReminderId");

                    b.ToTable("ReminderDests");
                });

            modelBuilder.Entity("CheckCarsAPI.Models.Report", b =>
                {
                    b.Property<string>("ReportId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CarId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CarPlate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.HasKey("ReportId");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("CheckCarsAPI.Models.VehicleAttachment", b =>
                {
                    b.Property<string>("AttachmentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CarId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("AttachmentId");

                    b.HasIndex("CarId");

                    b.ToTable("VehicleAttachments");
                });

            modelBuilder.Entity("CheckCarsAPI.Models.CrashReport", b =>
                {
                    b.HasBaseType("CheckCarsAPI.Models.Report");

                    b.Property<string>("CrashDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CrashedParts")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfCrash")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("CarId");

                    b.ToTable("CrashReports");
                });

            modelBuilder.Entity("CheckCarsAPI.Models.EntryExitReport", b =>
                {
                    b.HasBaseType("CheckCarsAPI.Models.Report");

                    b.Property<double>("FuelLevel")
                        .HasColumnType("float");

                    b.Property<bool>("HasChargerUSB")
                        .HasColumnType("bit");

                    b.Property<bool>("HasEmergencyKit")
                        .HasColumnType("bit");

                    b.Property<bool>("HasPhoneSupport")
                        .HasColumnType("bit");

                    b.Property<bool>("HasQuickPass")
                        .HasColumnType("bit");

                    b.Property<bool>("HasSpareTire")
                        .HasColumnType("bit");

                    b.Property<string>("InteriorsState")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MecanicState")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OilLevel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaintState")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TiresState")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("mileage")
                        .HasColumnType("bigint");

                    b.HasIndex("CarId");

                    b.ToTable("EntryExitReports");
                });

            modelBuilder.Entity("CheckCarsAPI.Models.IssueReport", b =>
                {
                    b.HasBaseType("CheckCarsAPI.Models.Report");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsResolved")
                        .HasColumnType("bit");

                    b.Property<string>("Priority")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("CarId");

                    b.ToTable("IssueReports");
                });

            modelBuilder.Entity("CheckCarsAPI.Models.VehicleReturn", b =>
                {
                    b.HasBaseType("CheckCarsAPI.Models.Report");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("mileage")
                        .HasColumnType("bigint");

                    b.HasIndex("CarId");

                    b.ToTable("VehicleReturns");
                });

            modelBuilder.Entity("CheckCarsAPI.Models.Booking", b =>
                {
                    b.HasOne("CheckCarsAPI.Models.Car", "Car")
                        .WithMany("Bookings")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");
                });

            modelBuilder.Entity("CheckCarsAPI.Models.CarService", b =>
                {
                    b.HasOne("CheckCarsAPI.Models.Car", "Car")
                        .WithMany("Services")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");
                });

            modelBuilder.Entity("CheckCarsAPI.Models.Commentary", b =>
                {
                    b.HasOne("CheckCarsAPI.Models.Report", "Report")
                        .WithMany("Commentaries")
                        .HasForeignKey("ReportId");

                    b.Navigation("Report");
                });

            modelBuilder.Entity("CheckCarsAPI.Models.Photo", b =>
                {
                    b.HasOne("CheckCarsAPI.Models.Report", "Report")
                        .WithMany("Photos")
                        .HasForeignKey("ReportId");

                    b.Navigation("Report");
                });

            modelBuilder.Entity("CheckCarsAPI.Models.Reminder", b =>
                {
                    b.HasOne("CheckCarsAPI.Models.Car", "Car")
                        .WithMany("Reminders")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");
                });

            modelBuilder.Entity("CheckCarsAPI.Models.ReminderDest", b =>
                {
                    b.HasOne("CheckCarsAPI.Models.Reminder", "Reminder")
                        .WithMany("ReminderDests")
                        .HasForeignKey("ReminderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reminder");
                });

            modelBuilder.Entity("CheckCarsAPI.Models.VehicleAttachment", b =>
                {
                    b.HasOne("CheckCarsAPI.Models.Car", "Car")
                        .WithMany("VehicleAttachments")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");
                });

            modelBuilder.Entity("CheckCarsAPI.Models.CrashReport", b =>
                {
                    b.HasOne("CheckCarsAPI.Models.Car", "Car")
                        .WithMany("CrashReports")
                        .HasForeignKey("CarId");

                    b.Navigation("Car");
                });

            modelBuilder.Entity("CheckCarsAPI.Models.EntryExitReport", b =>
                {
                    b.HasOne("CheckCarsAPI.Models.Car", "Car")
                        .WithMany("EntryExitReports")
                        .HasForeignKey("CarId");

                    b.Navigation("Car");
                });

            modelBuilder.Entity("CheckCarsAPI.Models.IssueReport", b =>
                {
                    b.HasOne("CheckCarsAPI.Models.Car", "Car")
                        .WithMany("IssueReports")
                        .HasForeignKey("CarId");

                    b.Navigation("Car");
                });

            modelBuilder.Entity("CheckCarsAPI.Models.VehicleReturn", b =>
                {
                    b.HasOne("CheckCarsAPI.Models.Car", "Car")
                        .WithMany("VehicleReturns")
                        .HasForeignKey("CarId");

                    b.Navigation("Car");
                });

            modelBuilder.Entity("CheckCarsAPI.Models.Car", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("CrashReports");

                    b.Navigation("EntryExitReports");

                    b.Navigation("IssueReports");

                    b.Navigation("Reminders");

                    b.Navigation("Services");

                    b.Navigation("VehicleAttachments");

                    b.Navigation("VehicleReturns");
                });

            modelBuilder.Entity("CheckCarsAPI.Models.Reminder", b =>
                {
                    b.Navigation("ReminderDests");
                });

            modelBuilder.Entity("CheckCarsAPI.Models.Report", b =>
                {
                    b.Navigation("Commentaries");

                    b.Navigation("Photos");
                });
#pragma warning restore 612, 618
        }
    }
}
